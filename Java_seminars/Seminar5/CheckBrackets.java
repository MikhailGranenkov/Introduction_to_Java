package Seminar5;


// Написать программу, определяющую правильность расстановки скобок в выражении. Пример 1: a+(d*3) - истина
// Пример 2: [a+(1*3) - ложь
// Пример 3: [6+(3*3)] - истина
// Пример 4: {a}[+]{(d*3)} - истина Пример 5: <{a}+{(d*3)}> - истина Пример 6: {a+]}{(d*3)} - ложь


// Мы используем стек для отслеживания открывающих скобок.
// Проходим по каждому символу в строке.
// Если символ - открывающая скобка, мы помещаем ее в стек.
// Если символ - закрывающая скобка, мы проверяем, соответствует ли она последней открывающей скобке в стеке. Если да, удаляем эту открывающую скобку из стека. Если нет, выражение неправильно.
// По завершении прохода по строке, выражение считается правильным, если стек пустой (все открывающие скобки были сопоставлены закрывающими).


import java.util.Scanner;
import java.util.Stack;

public class CheckBrackets {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Введите выражение:"); // Приглашаем пользователя ввести выражение
        String expression = scanner.nextLine(); // Считываем выражение из консоли
        scanner.close();

        boolean result = checkBrackets(expression); // Вызываем метод для проверки правильности расстановки скобок
        System.out.println("Правильность расстановки скобок: " + result); // Выводим результат проверки
    }

    public static boolean checkBrackets(String expression) {
        Stack<Character> stack = new Stack<>(); // Используем стек для отслеживания открывающих скобок

        for (char c : expression.toCharArray()) {
            if (c == '(' || c == '[' || c == '{' || c == '<') {
                stack.push(c); // Если встречаем открывающую скобку, помещаем ее в стек
            } else if (c == ')' || c == ']' || c == '}' || c == '>') {
                if (stack.isEmpty()) {
                    return false; // Если встречаем закрывающую скобку, но стек пустой, выражение неправильно
                }
                char top = stack.pop(); // Извлекаем верхний элемент из стека
                if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') || (c == '>' && top != '<')) {
                    return false; // Если закрывающая скобка не соответствует последней открывающей в стеке, выражение неправильно
                }
            }
        }

        return stack.isEmpty(); // После прохода по всем символам, выражение правильно, если стек пустой
    }
}
