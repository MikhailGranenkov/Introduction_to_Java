package Seminar5;

// Даны 2 строки, написать метод, который вернет true, если эти строки являются изоморфными и false, если нет. Строки изоморфны, если одну букву в первом слове можно заменить на некоторую букву во втором слове, при этом
// 1. повторяющиеся буквы одного слова меняются на одну и ту же букву с сохранением порядка следования. (Например, add - egg изоморфны)
// 2. буква может не меняться, а остаться такой же. (Например, note - code)
// Пример 1:
// Input: s = "foo", t = "bar" Output: false
// Пример 2:
// Input: s = "paper", t = "title" Output: true


// Этот метод работает следующим образом:

// Проверяет, что длины обеих строк совпадают.
// Создает отображение (Map), где ключами являются символы из первой строки, а значениями символы из второй строки.
// Проходится по каждой позиции в строках, сопоставляет символы из первой строки символам из второй строки.
// Если символ из первой строки уже сопоставлен с другим символом из второй строки или наоборот, строки не изоморфны.
// Если проверка прошла успешно для всех символов, строки изоморфны.


import java.util.HashMap;
import java.util.Map;

public class IsIsomorphic {
    public static void main(String[] args) {
        // Примеры использования метода
        System.out.println(isIsomorphic("foo", "bar"));   // Output: false
        System.out.println(isIsomorphic("paper", "title"));   // Output: true
    }

    public static boolean isIsomorphic(String s, String t) {
        if (s.length() != t.length()) {
            return false; // Если длины строк не совпадают, они не могут быть изоморфными
        }

        Map<Character, Character> map = new HashMap<>(); // Создаем Map для отображения символов из первой строки во вторую

        for (int i = 0; i < s.length(); i++) {
            char charS = s.charAt(i); // Получаем текущий символ из первой строки
            char charT = t.charAt(i); // Получаем текущий символ из второй строки

            if (map.containsKey(charS)) {
                if (map.get(charS) != charT) {
                    return false; // Если символ уже сопоставлен, но он не соответствует символу из второй строки, строки не изоморфны
                }
            } else {
                if (map.containsValue(charT)) {
                    return false; // Если символ из второй строки уже сопоставлен с другим символом из первой строки, строки не изоморфны
                }
                map.put(charS, charT); // Добавляем новую пару символов в отображение
            }
        }

        return true; // Если проверка прошла успешно, строки изоморфны
    }
}
