package Dz.Dz4;


// Дан LinkedList с несколькими элементами разного типа.
// В методе revert класса LLTasks реализуйте разворот этого списка
// без использования встроенного функционала.

// Пример
// // Дан 
// [1, One, 2, Two]
// // Вывод
// [1, One, 2, Two]
// [Two, 2, One, 1]


// Пояснения:
// Метод revert принимает на вход LinkedList<Object> и возвращает развернутый список
// того же типа.
// В методе revert используется алгоритм, который проходит половину списка
// и меняет местами элементы до середины списка с элементами с конца списка.
// В методе main создается список ll и заполняется значениями либо из аргументов
// командной строки, либо значениями по умолчанию.
// Создается экземпляр класса LLTasks, чтобы вызвать метод revert и получить
// развернутый список.
// Исходный список и развернутый список выводятся на экран с помощью System.out.println.


import java.util.LinkedList;

public class LLTasks {
    // Метод для разворота списка
    public static LinkedList<Object> revert(LinkedList<Object> ll) {
        int size = ll.size(); // Получаем размер списка
        // Проходим половину списка, так как для разворота достаточно обменять элементы только до середины
        for (int i = 0; i < size / 2; i++) {
            Object temp = ll.get(i); // Сохраняем текущий элемент списка во временной переменной
            // Меняем текущий элемент с элементом, находящимся на расстоянии i от конца списка
            ll.set(i, ll.get(size - i - 1));
            // Заменяем элемент на расстоянии i от конца списка сохраненным временным элементом
            ll.set(size - i - 1, temp);
        }
        return ll; // Возвращаем развернутый список
    }
}

// Класс для вывода результатов на экран и проверки
class Printer { 
    public static void main(String[] args) { 
        LinkedList<Object> ll = new LinkedList<>();

        // Проверяем, были ли переданы аргументы командной строки
        if (args.length == 0 || args.length != 4) {
            // Если нет, то добавляем значения по умолчанию
            ll.add(1);
            ll.add("One");
            ll.add(2);
            ll.add("Two");
        } else {
            // Если были переданы аргументы командной строки, добавляем их значения в список
            ll.add(Integer.parseInt(args[0]));
            ll.add(args[1]);
            ll.add(Integer.parseInt(args[2]));
            ll.add(args[3]);
        }

        LLTasks answer = new LLTasks(); // Создаем экземпляр класса для выполнения задачи
        System.out.println(ll); // Выводим исходный список
        LinkedList<Object> reversedList = answer.revert(ll); // Получаем развернутый список
        System.out.println(reversedList); // Выводим развернутый список
    }
}
